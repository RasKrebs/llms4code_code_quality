
----long----

Filename: memory_usage/long_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    50    167.1 MiB    167.1 MiB           1       @profile
    51                                             def __init__(self, n_components: int = None, decomposition_method: str = 'eigen'):
    52    167.1 MiB      0.0 MiB           1           self.n_components = n_components
    53    167.1 MiB      0.0 MiB           1           self.decomposition_method = decomposition_method


Filename: memory_usage/long_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    55    167.1 MiB    167.1 MiB           1       @profile
    56                                             def fit(self, X: Union[np.ndarray, pd.DataFrame, list]):
    57                                                 """
    58                                                 Fits the PCA model to the training data.
    59                                         
    60                                                 Parameters
    61                                                 ----------
    62                                                 X : Union[numpy.ndarray, pandas.DataFrame, list]
    63                                                     The training data
    64                                         
    65                                                 Returns
    66                                                 -------
    67                                                 self : PrincipalComponentAnalysis
    68                                                     Returns the instance itself
    69                                                 """
    70    167.1 MiB      0.0 MiB           1           if isinstance(X, pd.DataFrame):
    71                                                     X = X.values
    72    167.1 MiB      0.0 MiB           1           if isinstance(X, list):
    73                                                     X = np.array(X)
    74    167.2 MiB      0.0 MiB           1           self.mean_ = X.mean(axis=0)
    75    167.2 MiB      0.0 MiB           1           if self.decomposition_method == 'eigen':
    76    199.8 MiB     32.6 MiB           1               U, S, V = np.linalg.svd(X - self.mean_, full_matrices=False)
    77    199.8 MiB      0.0 MiB           1               self.components_ = V.T[:self.n_components]
    78    199.8 MiB      0.0 MiB           1               self.explained_variance_ratio_ = S[:self.n_components] / S.sum()
    79                                                 elif self.decomposition_method == 'svd':
    80                                                     U, S, V = randomized_svd(X - self.mean_, n_components=self.n_components, n_iter=7, random_state=0)
    81                                                     self.components_ = V
    82                                                     self.explained_variance_ratio_ = S / S.sum()
    83                                                 else:
    84                                                     raise ValueError(f"Invalid decomposition method: {self.decomposition_method}. "
    85                                                                      f"Valid methods are 'eigen' and 'svd'.")
    86    199.8 MiB      0.0 MiB           1           self.n_components_ = self.components_.shape[0]
    87    199.8 MiB      0.0 MiB           1           return self


Filename: memory_usage/long_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   109    199.8 MiB    199.8 MiB           1       @profile
   110                                             def transform(self, X: Union[np.ndarray, pd.DataFrame, list], n_components: int = None):
   111                                                 """
   112                                                 Transforms the data using the fitted PCA model.
   113                                         
   114                                                 Parameters
   115                                                 ----------
   116                                                 X : Union[numpy.ndarray, pandas.DataFrame, list]
   117                                                     The data to transform
   118                                                 n_components : int, optional
   119                                                     The number of principal components to use, by default None (all components)
   120                                         
   121                                                 Returns
   122                                                 -------
   123                                                 numpy.ndarray
   124                                                     The transformed data
   125                                                 """
   126    199.8 MiB      0.0 MiB           1           if isinstance(X, pd.DataFrame):
   127                                                     X = X.values
   128    199.8 MiB      0.0 MiB           1           if isinstance(X, list):
   129                                                     X = np.array(X)
   130    199.8 MiB      0.0 MiB           1           if n_components is None:
   131    199.8 MiB      0.0 MiB           1               n_components = self.n_components
   132    199.8 MiB      0.0 MiB           1           if self.decomposition_method == 'eigen':
   133    222.9 MiB     23.1 MiB           1               return X @ self.components_.T[:n_components] + self.mean_
   134                                                 elif self.decomposition_method == 'svd':
   135                                                     return U @ np.diag(S[:n_components])
   136                                                 else:
   137                                                     raise ValueError(f"Invalid decomposition method: {self.decomposition_method}. "
   138                                                                      f"Valid methods are 'eigen' and 'svd'.")


Filename: memory_usage/long_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    89    167.1 MiB    167.1 MiB           1       @profile
    90                                             def fit_transform(self, X: Union[np.ndarray, pd.DataFrame, list], n_components: int = None):
    91                                                 """
    92                                                 Fits the PCA model to the training data and transforms the data.
    93                                         
    94                                                 Parameters
    95                                                 ----------
    96                                                 X : Union[numpy.ndarray, pandas.DataFrame, list]
    97                                                     The training data
    98                                                 n_components : int, optional
    99                                                     The number of principal components to use, by default None (all components)
   100                                         
   101                                                 Returns
   102                                                 -------
   103                                                 numpy.ndarray
   104                                                     The transformed data
   105                                                 """
   106    199.8 MiB     32.7 MiB           1           self.fit(X)
   107    222.9 MiB     23.1 MiB           1           return self.transform(X, n_components)


CPU Usage: 21.05%

----medium----

Filename: memory_usage/medium_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    34    120.7 MiB    120.7 MiB           1       @profile
    35                                             def __init__(self, n_components=None, decomposition_method='eigen'):
    36                                                 """
    37                                                 Initialize a PrincipalComponentAnalysis object.
    38                                         
    39                                                 Args:
    40                                                     n_components (int, optional): Number of principal components to use.
    41                                                         If not specified, all components are used.
    42                                                     decomposition_method (str, optional): Method for computing
    43                                                         eigenvalues and eigenvectors. Can be 'eigen' or 'svd'. If not
    44                                                         specified, 'eigen' is used.
    45                                                 """
    46    120.7 MiB      0.0 MiB           1           self.n_components = n_components
    47    120.7 MiB      0.0 MiB           1           self.decomposition_method = decomposition_method


Filename: memory_usage/medium_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   134    120.7 MiB    120.7 MiB           1       @profile
   135                                             def _fit_eigen(self, X):
   136                                                 """
   137                                                 Compute eigenvalues and eigenvectors using the eigendecomposition of
   138                                                 X.
   139                                         
   140                                                 Args:
   141                                                     X (ndarray): Data to fit the model to.
   142                                                 """
   143                                                 # Compute eigenvalues and eigenvectors
   144    129.4 MiB      8.8 MiB           1           self.eigen_values_, self.eigen_vectors_ = np.linalg.eig(np.cov(X.T))
   145                                         
   146                                                 # Sort eigenvalues and eigenvectors by decreasing eigenvalue
   147    129.5 MiB      0.1 MiB           1           idx = self.eigen_values_.argsort()[::-1]
   148    129.5 MiB      0.0 MiB           1           self.eigen_values_ = self.eigen_values_[idx]
   149    129.6 MiB      0.1 MiB           1           self.eigen_vectors_ = self.eigen_vectors_[:, idx]
   150                                         
   151                                                 # Store explained variance ratio and cumulative explained variance ratio
   152    129.6 MiB      0.0 MiB           1           self.explained_variance_ratio_ = self.eigen_values_ ** 2 / np.sum(self.eigen_values_ ** 2)
   153    129.6 MiB      0.0 MiB           1           self.cumulative_explained_variance_ratio_ = np.cumsum(self.explained_variance_ratio_)


Filename: memory_usage/medium_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    49    120.7 MiB    120.7 MiB           1       @profile
    50                                             def fit(self, X):
    51                                                 """
    52                                                 Fit the model to the data.
    53                                         
    54                                                 Args:
    55                                                     X (ndarray or DataFrame): Data to fit the model to. Can be a numpy
    56                                                         array, pandas DataFrame, or a list of lists.
    57                                         
    58                                                 Raises:
    59                                                     ValueError: If the input data is not a numpy array, pandas DataFrame,
    60                                                         or a list of lists.
    61                                                 """
    62    120.7 MiB      0.0 MiB           1           if isinstance(X, pd.DataFrame):
    63                                                     X = X.values
    64                                         
    65    120.7 MiB      0.0 MiB           1           if not isinstance(X, (np.ndarray, list)):
    66                                                     raise ValueError('Input data must be a numpy array, pandas '
    67                                                                      'DataFrame, or a list of lists')
    68                                         
    69                                                 # Compute eigenvalues and eigenvectors
    70    120.7 MiB      0.0 MiB           1           if self.decomposition_method == 'eigen':
    71    129.6 MiB      8.9 MiB           1               self._fit_eigen(X)
    72                                                 elif self.decomposition_method == 'svd':
    73                                                     self._fit_svd(X)
    74                                                 else:
    75                                                     raise ValueError(f'Invalid decomposition method: {self.decomposition_method}')


Filename: memory_usage/medium_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   177    129.7 MiB    129.7 MiB           1       @profile
   178                                             def _transform_eigen(self, X):
   179                                                 """
   180                                                 Project the data onto the principal components using the eigendecomposition
   181                                                 of X.
   182                                         
   183                                                 Args:
   184                                                     X (ndarray): Data to project.
   185                                         
   186                                                 Returns:
   187                                                     ndarray: Projected data. Shape is (n_samples, n_components) if
   188                                                         n_components is not specified, or (n_samples, n_components) if
   189                                                         n_components is specified.
   190                                                 """
   191                                                 # Project data onto principal components
   192    129.7 MiB      0.0 MiB           1           if self.n_components is None:
   193    145.1 MiB     15.5 MiB           1               return X @ self.eigen_vectors_
   194                                                 else:
   195                                                     return X @ self.eigen_vectors_[:, :self.n_components]


Filename: memory_usage/medium_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    77    129.7 MiB    129.7 MiB           1       @profile
    78                                             def transform(self, X):
    79                                                 """
    80                                                 Project the data onto the principal components.
    81                                         
    82                                                 Args:
    83                                                     X (ndarray or DataFrame): Data to project. Can be a numpy array,
    84                                                         pandas DataFrame, or a list of lists.
    85                                         
    86                                                 Returns:
    87                                                     ndarray: Projected data. Shape is (n_samples, n_components) if
    88                                                         n_components is not specified, or (n_samples, n_components) if
    89                                                         n_components is specified.
    90                                         
    91                                                 Raises:
    92                                                     ValueError: If the model is not fitted or if the input data is not a
    93                                                         numpy array, pandas DataFrame, or a list of lists.
    94                                                 """
    95    129.7 MiB      0.0 MiB           1           if not self.is_fitted_:
    96                                                     raise ValueError('Model must be fitted before transforming data')
    97                                         
    98    129.7 MiB      0.0 MiB           1           if isinstance(X, pd.DataFrame):
    99                                                     X = X.values
   100                                         
   101    129.7 MiB      0.0 MiB           1           if not isinstance(X, (np.ndarray, list)):
   102                                                     raise ValueError('Input data must be a numpy array, pandas '
   103                                                                      'DataFrame, or a list of lists')
   104                                         
   105                                                 # Project data onto principal components
   106    129.7 MiB      0.0 MiB           1           if self.decomposition_method == 'eigen':
   107    145.1 MiB     15.5 MiB           1               return self._transform_eigen(X)
   108                                                 elif self.decomposition_method == 'svd':
   109                                                     return self._transform_svd(X)
   110                                                 else:
   111                                                     raise ValueError(f'Invalid decomposition method: {self.decomposition_method}')


CPU Usage: 21.0%

----small----

Filename: memory_usage/small_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    15     73.9 MiB     73.9 MiB           1   @profile
    16                                         def pca_from_eigen_decomposition(X):
    17                                             """
    18                                             Perform PCA from eigen decomposition on a dataset X.
    19                                         
    20                                             Args:
    21                                                 X (numpy.ndarray): A dataset of shape (n_samples, n_features)
    22                                         
    23                                             Returns:
    24                                                 numpy.ndarray: The transformed dataset of shape (n_samples, n_components)
    25                                             """
    26                                             # Center the dataset
    27     74.0 MiB      0.1 MiB           1       X_mean = X.mean(axis=0)
    28     81.6 MiB      7.7 MiB           1       X = X - X_mean
    29                                         
    30                                             # Compute the eigenvalues and eigenvectors of the covariance matrix
    31     89.8 MiB      8.1 MiB           1       cov_mat = np.cov(X.T)
    32     90.8 MiB      1.0 MiB           1       eigenvalues, eigenvectors = np.linalg.eig(cov_mat)
    33                                         
    34                                             # Sort the eigenvalues and eigenvectors in decreasing order
    35     90.8 MiB      0.0 MiB           1       idx = eigenvalues.argsort()[::-1]
    36     90.8 MiB      0.0 MiB           1       eigenvalues = eigenvalues[idx]
    37     90.8 MiB      0.0 MiB           1       eigenvectors = eigenvectors[:, idx]
    38                                         
    39                                             # Keep the first n_components eigenvalues and eigenvectors
    40     90.8 MiB      0.0 MiB           1       n_components = len(eigenvalues)
    41    107.4 MiB     16.6 MiB           1       transformed_X = eigenvectors[:, :n_components].T @ (X - X_mean).T
    42                                         
    43    107.4 MiB      0.0 MiB           1       return transformed_X


Filename: memory_usage/small_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    45    107.4 MiB    107.4 MiB           1   @profile
    46                                         def pca_from_singular_value_decomposition(X):
    47                                             """
    48                                             Perform PCA from singular value decomposition on a dataset X.
    49                                         
    50                                             Args:
    51                                                 X (numpy.ndarray): A dataset of shape (n_samples, n_features)
    52                                         
    53                                             Returns:
    54                                                 numpy.ndarray: The transformed dataset of shape (n_samples, n_components)
    55                                             """
    56                                             # Center the dataset
    57    107.4 MiB      0.0 MiB           1       X_mean = X.mean(axis=0)
    58    107.5 MiB      0.0 MiB           1       X = X - X_mean
    59                                         
    60                                             # Compute the SVD of the centered dataset
    61    797.4 MiB    689.9 MiB           1       U, S, Vt = np.linalg.svd(X)
    62                                         
    63                                             # Sort the singular values in decreasing order
    64    797.6 MiB      0.3 MiB           1       idx = S.argsort()[::-1]
    65    797.7 MiB      0.1 MiB           1       S = S[idx]
    66     42.5 MiB   -755.3 MiB           1       U = U[:, idx]
    67     42.5 MiB      0.1 MiB           1       Vt = Vt[idx]
    68                                         
    69                                             # Keep the first n_components singular values
    70     42.6 MiB      0.0 MiB           1       n_components = len(S)
    71     66.2 MiB     23.7 MiB           1       transformed_X = U @ np.diag(S[:n_components]) @ Vt
    72                                         
    73     66.2 MiB      0.0 MiB           1       return transformed_X


CPU Usage: 20.941666666666666%
