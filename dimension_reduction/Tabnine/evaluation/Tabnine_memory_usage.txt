
----long----

Filename: memory_usage/long_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    39    166.0 MiB    166.0 MiB           1       @profile
    40                                             def __init__(self, n_components: int = None, decomposition_method: str = 'eigen'):
    41    166.0 MiB      0.0 MiB           1           self.n_components = n_components
    42    166.0 MiB      0.0 MiB           1           self.decomposition_method = decomposition_method


Filename: memory_usage/long_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    44    166.1 MiB    166.1 MiB           1       @profile
    45                                             def fit(self, X: Union[np.ndarray, pd.DataFrame, list]):
    46                                                 """
    47                                                 Fits the PCA model to the training data.
    48                                         
    49                                                 Parameters
    50                                                 ----------
    51                                                 X : Union[numpy.ndarray, pandas.DataFrame, list]
    52                                                     The training data
    53                                         
    54                                                 Returns
    55                                                 -------
    56                                                 self : PrincipalComponentAnalysis
    57                                                     Returns the instance itself
    58                                                 """
    59    166.1 MiB      0.0 MiB           1           if isinstance(X, pd.DataFrame):
    60                                                     X = X.values
    61    166.1 MiB      0.0 MiB           1           if isinstance(X, list):
    62                                                     X = np.array(X)
    63    166.2 MiB      0.0 MiB           1           self.mean_ = X.mean(axis=0)
    64    166.2 MiB      0.0 MiB           1           if self.decomposition_method == 'eigen':
    65    199.2 MiB     33.1 MiB           1               U, S, V = np.linalg.svd(X - self.mean_, full_matrices=False)
    66    199.2 MiB      0.0 MiB           1               self.components_ = V.T[:self.n_components]
    67    199.2 MiB      0.0 MiB           1               self.explained_variance_ratio_ = S[:self.n_components] / S.sum()
    68                                                 elif self.decomposition_method == 'svd':
    69                                                     U, S, V = randomized_svd(X - self.mean_, n_components=self.n_components, n_iter=7, random_state=0)
    70                                                     self.components_ = V
    71                                                     self.explained_variance_ratio_ = S / S.sum()
    72                                                 else:
    73                                                     raise ValueError(f"Invalid decomposition method: {self.decomposition_method}. "
    74                                                                      f"Valid methods are 'eigen' and 'svd'.")
    75    199.2 MiB      0.0 MiB           1           self.n_components_ = self.components_.shape[0]
    76    199.2 MiB      0.0 MiB           1           return self


Filename: memory_usage/long_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    98    199.3 MiB    199.3 MiB           1       @profile
    99                                             def transform(self, X: Union[np.ndarray, pd.DataFrame, list], n_components: int = None):
   100                                                 """
   101                                                 Transforms the data using the fitted PCA model.
   102                                         
   103                                                 Parameters
   104                                                 ----------
   105                                                 X : Union[numpy.ndarray, pandas.DataFrame, list]
   106                                                     The data to transform
   107                                                 n_components : int, optional
   108                                                     The number of principal components to use, by default None (all components)
   109                                         
   110                                                 Returns
   111                                                 -------
   112                                                 numpy.ndarray
   113                                                     The transformed data
   114                                                 """
   115    199.3 MiB      0.0 MiB           1           if isinstance(X, pd.DataFrame):
   116                                                     X = X.values
   117    199.3 MiB      0.0 MiB           1           if isinstance(X, list):
   118                                                     X = np.array(X)
   119    199.3 MiB      0.0 MiB           1           if n_components is None:
   120    199.3 MiB      0.0 MiB           1               n_components = self.n_components
   121    199.3 MiB      0.0 MiB           1           if self.decomposition_method == 'eigen':
   122    222.3 MiB     23.0 MiB           1               return X @ self.components_.T[:n_components] + self.mean_
   123                                                 elif self.decomposition_method == 'svd':
   124                                                     return U @ np.diag(S[:n_components])
   125                                                 else:
   126                                                     raise ValueError(f"Invalid decomposition method: {self.decomposition_method}. "
   127                                                                      f"Valid methods are 'eigen' and 'svd'.")


Filename: memory_usage/long_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    78    166.1 MiB    166.1 MiB           1       @profile
    79                                             def fit_transform(self, X: Union[np.ndarray, pd.DataFrame, list], n_components: int = None):
    80                                                 """
    81                                                 Fits the PCA model to the training data and transforms the data.
    82                                         
    83                                                 Parameters
    84                                                 ----------
    85                                                 X : Union[numpy.ndarray, pandas.DataFrame, list]
    86                                                     The training data
    87                                                 n_components : int, optional
    88                                                     The number of principal components to use, by default None (all components)
    89                                         
    90                                                 Returns
    91                                                 -------
    92                                                 numpy.ndarray
    93                                                     The transformed data
    94                                                 """
    95    199.3 MiB     33.1 MiB           1           self.fit(X)
    96    222.3 MiB     23.1 MiB           1           return self.transform(X, n_components)



----medium----

Filename: memory_usage/medium_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    23    123.2 MiB    123.2 MiB           1       @profile
    24                                             def __init__(self, n_components=None, decomposition_method='eigen'):
    25                                                 """
    26                                                 Initialize a PrincipalComponentAnalysis object.
    27                                         
    28                                                 Args:
    29                                                     n_components (int, optional): Number of principal components to use.
    30                                                         If not specified, all components are used.
    31                                                     decomposition_method (str, optional): Method for computing
    32                                                         eigenvalues and eigenvectors. Can be 'eigen' or 'svd'. If not
    33                                                         specified, 'eigen' is used.
    34                                                 """
    35    123.2 MiB      0.0 MiB           1           self.n_components = n_components
    36    123.2 MiB      0.0 MiB           1           self.decomposition_method = decomposition_method


Filename: memory_usage/medium_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   123    123.2 MiB    123.2 MiB           1       @profile
   124                                             def _fit_eigen(self, X):
   125                                                 """
   126                                                 Compute eigenvalues and eigenvectors using the eigendecomposition of
   127                                                 X.
   128                                         
   129                                                 Args:
   130                                                     X (ndarray): Data to fit the model to.
   131                                                 """
   132                                                 # Compute eigenvalues and eigenvectors
   133    131.9 MiB      8.8 MiB           1           self.eigen_values_, self.eigen_vectors_ = np.linalg.eig(np.cov(X.T))
   134                                         
   135                                                 # Sort eigenvalues and eigenvectors by decreasing eigenvalue
   136    131.9 MiB      0.0 MiB           1           idx = self.eigen_values_.argsort()[::-1]
   137    131.9 MiB      0.0 MiB           1           self.eigen_values_ = self.eigen_values_[idx]
   138    132.0 MiB      0.1 MiB           1           self.eigen_vectors_ = self.eigen_vectors_[:, idx]
   139                                         
   140                                                 # Store explained variance ratio and cumulative explained variance ratio
   141    132.0 MiB      0.0 MiB           1           self.explained_variance_ratio_ = self.eigen_values_ ** 2 / np.sum(self.eigen_values_ ** 2)
   142    132.0 MiB      0.0 MiB           1           self.cumulative_explained_variance_ratio_ = np.cumsum(self.explained_variance_ratio_)


Filename: memory_usage/medium_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    38    123.2 MiB    123.2 MiB           1       @profile
    39                                             def fit(self, X):
    40                                                 """
    41                                                 Fit the model to the data.
    42                                         
    43                                                 Args:
    44                                                     X (ndarray or DataFrame): Data to fit the model to. Can be a numpy
    45                                                         array, pandas DataFrame, or a list of lists.
    46                                         
    47                                                 Raises:
    48                                                     ValueError: If the input data is not a numpy array, pandas DataFrame,
    49                                                         or a list of lists.
    50                                                 """
    51    123.2 MiB      0.0 MiB           1           if isinstance(X, pd.DataFrame):
    52                                                     X = X.values
    53                                         
    54    123.2 MiB      0.0 MiB           1           if not isinstance(X, (np.ndarray, list)):
    55                                                     raise ValueError('Input data must be a numpy array, pandas '
    56                                                                      'DataFrame, or a list of lists')
    57                                         
    58                                                 # Compute eigenvalues and eigenvectors
    59    123.2 MiB      0.0 MiB           1           if self.decomposition_method == 'eigen':
    60    132.0 MiB      8.9 MiB           1               self._fit_eigen(X)
    61                                                 elif self.decomposition_method == 'svd':
    62                                                     self._fit_svd(X)
    63                                                 else:
    64                                                     raise ValueError(f'Invalid decomposition method: {self.decomposition_method}')


Filename: memory_usage/medium_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   166    132.0 MiB    132.0 MiB           1       @profile
   167                                             def _transform_eigen(self, X):
   168                                                 """
   169                                                 Project the data onto the principal components using the eigendecomposition
   170                                                 of X.
   171                                         
   172                                                 Args:
   173                                                     X (ndarray): Data to project.
   174                                         
   175                                                 Returns:
   176                                                     ndarray: Projected data. Shape is (n_samples, n_components) if
   177                                                         n_components is not specified, or (n_samples, n_components) if
   178                                                         n_components is specified.
   179                                                 """
   180                                                 # Project data onto principal components
   181    132.0 MiB      0.0 MiB           1           if self.n_components is None:
   182    147.5 MiB     15.4 MiB           1               return X @ self.eigen_vectors_
   183                                                 else:
   184                                                     return X @ self.eigen_vectors_[:, :self.n_components]


Filename: memory_usage/medium_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    66    132.0 MiB    132.0 MiB           1       @profile
    67                                             def transform(self, X):
    68                                                 """
    69                                                 Project the data onto the principal components.
    70                                         
    71                                                 Args:
    72                                                     X (ndarray or DataFrame): Data to project. Can be a numpy array,
    73                                                         pandas DataFrame, or a list of lists.
    74                                         
    75                                                 Returns:
    76                                                     ndarray: Projected data. Shape is (n_samples, n_components) if
    77                                                         n_components is not specified, or (n_samples, n_components) if
    78                                                         n_components is specified.
    79                                         
    80                                                 Raises:
    81                                                     ValueError: If the model is not fitted or if the input data is not a
    82                                                         numpy array, pandas DataFrame, or a list of lists.
    83                                                 """
    84    132.0 MiB      0.0 MiB           1           if not self.is_fitted_:
    85                                                     raise ValueError('Model must be fitted before transforming data')
    86                                         
    87    132.0 MiB      0.0 MiB           1           if isinstance(X, pd.DataFrame):
    88                                                     X = X.values
    89                                         
    90    132.0 MiB      0.0 MiB           1           if not isinstance(X, (np.ndarray, list)):
    91                                                     raise ValueError('Input data must be a numpy array, pandas '
    92                                                                      'DataFrame, or a list of lists')
    93                                         
    94                                                 # Project data onto principal components
    95    132.0 MiB      0.0 MiB           1           if self.decomposition_method == 'eigen':
    96    147.5 MiB     15.4 MiB           1               return self._transform_eigen(X)
    97                                                 elif self.decomposition_method == 'svd':
    98                                                     return self._transform_svd(X)
    99                                                 else:
   100                                                     raise ValueError(f'Invalid decomposition method: {self.decomposition_method}')



----small----

Filename: memory_usage/small_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
     4     73.1 MiB     73.1 MiB           1   @profile
     5                                         def pca_from_eigen_decomposition(X):
     6                                             """
     7                                             Perform PCA from eigen decomposition on a dataset X.
     8                                         
     9                                             Args:
    10                                                 X (numpy.ndarray): A dataset of shape (n_samples, n_features)
    11                                         
    12                                             Returns:
    13                                                 numpy.ndarray: The transformed dataset of shape (n_samples, n_components)
    14                                             """
    15                                             # Center the dataset
    16     73.1 MiB      0.0 MiB           1       X_mean = X.mean(axis=0)
    17     80.9 MiB      7.7 MiB           1       X = X - X_mean
    18                                         
    19                                             # Compute the eigenvalues and eigenvectors of the covariance matrix
    20     88.7 MiB      7.9 MiB           1       cov_mat = np.cov(X.T)
    21     89.6 MiB      0.9 MiB           1       eigenvalues, eigenvectors = np.linalg.eig(cov_mat)
    22                                         
    23                                             # Sort the eigenvalues and eigenvectors in decreasing order
    24     89.6 MiB      0.0 MiB           1       idx = eigenvalues.argsort()[::-1]
    25     89.6 MiB      0.0 MiB           1       eigenvalues = eigenvalues[idx]
    26     89.6 MiB      0.0 MiB           1       eigenvectors = eigenvectors[:, idx]
    27                                         
    28                                             # Keep the first n_components eigenvalues and eigenvectors
    29     89.6 MiB      0.0 MiB           1       n_components = len(eigenvalues)
    30    106.2 MiB     16.6 MiB           1       transformed_X = eigenvectors[:, :n_components].T @ (X - X_mean).T
    31                                         
    32    106.2 MiB      0.0 MiB           1       return transformed_X


Filename: memory_usage/small_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    34    106.3 MiB    106.3 MiB           1   @profile
    35                                         def pca_from_singular_value_decomposition(X):
    36                                             """
    37                                             Perform PCA from singular value decomposition on a dataset X.
    38                                         
    39                                             Args:
    40                                                 X (numpy.ndarray): A dataset of shape (n_samples, n_features)
    41                                         
    42                                             Returns:
    43                                                 numpy.ndarray: The transformed dataset of shape (n_samples, n_components)
    44                                             """
    45                                             # Center the dataset
    46    106.3 MiB      0.0 MiB           1       X_mean = X.mean(axis=0)
    47    114.0 MiB      7.7 MiB           1       X = X - X_mean
    48                                         
    49                                             # Compute the SVD of the centered dataset
    50    788.3 MiB    674.3 MiB           1       U, S, Vt = np.linalg.svd(X)
    51                                         
    52                                             # Sort the singular values in decreasing order
    53    788.5 MiB      0.2 MiB           1       idx = S.argsort()[::-1]
    54    788.6 MiB      0.1 MiB           1       S = S[idx]
    55     51.1 MiB   -737.5 MiB           1       U = U[:, idx]
    56     51.1 MiB      0.1 MiB           1       Vt = Vt[idx]
    57                                         
    58                                             # Keep the first n_components singular values
    59     51.2 MiB      0.0 MiB           1       n_components = len(S)
    60     74.8 MiB     23.7 MiB           1       transformed_X = U @ np.diag(S[:n_components]) @ Vt
    61                                         
    62     74.9 MiB      0.0 MiB           1       return transformed_X


