
----long----

Filename: memory_usage/long_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    25     72.6 MiB     72.6 MiB           1       @profile
    26                                             def __init__(self, n_components=None, decomposition_method='eigen'):
    27     72.6 MiB      0.0 MiB           1           self.n_components = n_components
    28     72.6 MiB      0.0 MiB           1           self.decomposition_method = decomposition_method
    29     72.6 MiB      0.0 MiB           1           self.explained_variance = []
    30     72.6 MiB      0.0 MiB           1           self.cumulative_explained_variance = []


Filename: memory_usage/long_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    32     72.6 MiB     72.6 MiB           1       @profile
    33                                             def fit(self, X):
    34                                                 """
    35                                                 Computes the eigen values and eigen vectors for the inputted data.
    36                                         
    37                                                 Parameters:
    38                                                     X (numpy array, pandas dataframe or list of lists): The input data to perform PCA on.
    39                                         
    40                                                 Returns:
    41                                                     A numpy array representing the transformed data.
    42                                                 """
    43     72.6 MiB      0.0 MiB           1           if self.decomposition_method == 'eigen':
    44     73.5 MiB      0.9 MiB           1               eigen_values, eigen_vectors = np.linalg.eig(X.T @ X)
    45                                                 elif self.decomposition_method == 'svd':
    46                                                     _, _, vt = np.linalg.svd(X.T @ X)
    47                                                     eigen_values = np.diag(np.dot(vt, np.diag(eigen_values)))
    48                                                     eigen_vectors = vt
    49                                                 else:
    50                                                     raise ValueError("Invalid decomposition method")
    51                                         
    52     73.5 MiB      0.0 MiB           1           if self.n_components is not None and self.n_components < eigen_values.shape[0]:
    53     73.5 MiB      0.0 MiB           1               eigen_values = eigen_values[:self.n_components]
    54     73.5 MiB      0.0 MiB           1               self.eigenvectors = eigen_vectors[:, :self.n_components]
    55                                         
    56     73.5 MiB      0.0 MiB           1           self.explained_variance = np.sum(eigen_values) / len(X)
    57     73.5 MiB      0.0 MiB           1           self.cumulative_explained_variance = np.cumsum(eigen_values) / len(X)
    58                                         
    59     81.2 MiB      7.6 MiB           1           return X @ eigen_vectors


Filename: memory_usage/long_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    60     81.2 MiB     81.2 MiB           1       @profile
    61                                             def transform(self, X, n_components=None):
    62                                                 """
    63                                                 Projects the input data onto the principal components.
    64                                         
    65                                                 Parameters:
    66                                                     X (numpy array, pandas dataframe or list of lists): The input data to perform PCA on.
    67                                                     n_components (int): The number of components to project onto. If not specified, defaults to all components.
    68                                         
    69                                                 Returns:
    70                                                     A numpy array representing the transformed data.
    71                                                 """
    72     81.2 MiB      0.0 MiB           1           if n_components is None:
    73     81.2 MiB      0.0 MiB           1               n_components = self.n_components
    74                                         
    75     81.9 MiB      0.8 MiB           1           return X @ self.eigenvectors[:, :n_components]


Filename: memory_usage/long_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    77     72.6 MiB     72.6 MiB           1       @profile
    78                                             def fit_transform(self, X, n_components=None):
    79                                                 """
    80                                                 Performs PCA on the input data and projects it onto the principal components.
    81                                         
    82                                                 Parameters:
    83                                                     X (numpy array, pandas dataframe or list of lists): The input data to perform PCA on.
    84                                                     n_components (int): The number of components to project onto. If not specified, defaults to all components.
    85                                         
    86                                                 Returns:
    87                                                     A numpy array representing the transformed data.
    88                                                 """
    89     81.2 MiB      8.5 MiB           1           self.fit(X)
    90     81.9 MiB      0.8 MiB           1           return self.transform(X, n_components=n_components)


CPU Usage: 12.15%

----medium----

Filename: memory_usage/medium_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    29     72.9 MiB     72.9 MiB           1       @profile
    30                                             def __init__(self, n_components=None, decomposition_method='eigen'):
    31     72.9 MiB      0.0 MiB           1           self.n_components = n_components
    32     72.9 MiB      0.0 MiB           1           self.decomposition_method = decomposition_method


Filename: memory_usage/medium_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    34     72.9 MiB     72.9 MiB           1       @profile
    35                                             def fit(self, X):
    36                                                 # Compute the covariance matrix of the input data
    37     81.0 MiB      8.2 MiB           1           cov = np.cov(X, rowvar=False)
    38                                         
    39                                                 # Compute the eigenvectors and eigenvalues of the covariance matrix
    40     81.5 MiB      0.5 MiB           1           eigvals, eigvecs = np.linalg.eigh(cov)
    41                                         
    42                                                 # Sort the eigenvalues in descending order
    43     81.6 MiB      0.0 MiB           1           sorted_eigvals = np.sort(eigvals)[::-1]
    44                                         
    45                                                 # Select the top n eigenvectors corresponding to the largest eigenvalues
    46     81.6 MiB      0.0 MiB           1           self.components_ = eigvecs[:self.n_components].T
    47                                         
    48                                                 # Compute the principal components by projecting the data onto the selected eigenvectors
    49     90.2 MiB      8.6 MiB           1           self.principal_components_ = np.dot(X, self.components_)


Filename: memory_usage/medium_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    51     90.2 MiB     90.2 MiB           1       @profile
    52                                             def transform(self, X):
    53     91.1 MiB      0.9 MiB           1           return np.dot(X, self.components_)


Filename: memory_usage/medium_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    55     72.9 MiB     72.9 MiB           1       @profile
    56                                             def fit_transform(self, X):
    57     90.2 MiB     17.3 MiB           1           self.fit(X)
    58     91.1 MiB      0.9 MiB           1           return self.transform(X)


CPU Usage: 22.866666666666664%

----small----

Filename: memory_usage/small_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    15     71.7 MiB     71.7 MiB           1   @profile
    16                                         def pca_eigen(X, k):
    17                                             # Standardize the data
    18     87.6 MiB     15.9 MiB           1       X = (X - np.mean(X)) / np.std(X)
    19                                         
    20                                             # Compute the covariance matrix
    21     95.9 MiB      8.3 MiB           1       cov = np.cov(X, rowvar=False)
    22                                         
    23                                             # Compute the eigenvalues and eigenvectors of the covariance matrix
    24     96.5 MiB      0.6 MiB           1       eigvals, eigvecs = np.linalg.eig(cov)
    25                                         
    26                                             # Sort the eigenvalues and corresponding eigenvectors in descending order
    27     96.5 MiB      0.0 MiB           1       idx = np.argsort(eigvals)[::-1]
    28     96.5 MiB      0.0 MiB           1       eigvals = eigvals[idx]
    29     96.5 MiB      0.0 MiB           1       eigvecs = eigvecs[:, idx]
    30                                         
    31                                             # Select the top k eigenvectors that explain the most variance
    32     96.5 MiB      0.0 MiB           1       W = eigvecs[:, :k]
    33                                         
    34                                             # Project the data onto the selected eigenvectors
    35    105.1 MiB      8.6 MiB           1       X_pca = X @ W
    36                                         
    37    105.1 MiB      0.0 MiB           1       return X_pca


CPU Usage: 22.05%
