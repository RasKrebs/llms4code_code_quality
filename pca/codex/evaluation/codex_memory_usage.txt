
----long----

Filename: memory_usage/long_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    20     72.4 MiB     72.4 MiB           1       @profile
    21                                             def __init__(self, n_components: Optional[int] = None, decomposition_method: str = 'eigen'):
    22                                                 """
    23                                                 Initialize the PCA class.
    24                                         
    25                                                 Parameters:
    26                                                 n_components (int): Number of components to keep. If not specified, all components are kept.
    27                                                 decomposition_method (str): The method to use for decomposition. Either 'eigen' or 'svd'. Defaults to 'eigen'.
    28                                                 """
    29     72.4 MiB      0.0 MiB           1           self.n_components = n_components
    30     72.4 MiB      0.0 MiB           1           self.decomposition_method = decomposition_method
    31     72.4 MiB      0.0 MiB           1           self.components = None
    32     72.4 MiB      0.0 MiB           1           self.explained_variance_ = None
    33     72.4 MiB      0.0 MiB           1           self.explained_variance_ratio_ = None
    34     72.4 MiB      0.0 MiB           1           self.cumulative_explained_variance_ratio_ = None


Filename: memory_usage/long_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     72.4 MiB     72.4 MiB           1       @profile
    37                                             def fit(self, X: Union[np.ndarray, list]):
    38                                                 """
    39                                                 Fit the model with X.
    40                                         
    41                                                 Parameters:
    42                                                 X (numpy.ndarray or list): Training data.
    43                                                 """
    44     72.4 MiB      0.0 MiB           1           X = np.asarray(X)
    45     80.1 MiB      7.7 MiB           1           X = X - np.mean(X, axis=0)
    46     80.1 MiB      0.0 MiB           1           if self.decomposition_method == 'eigen':
    47     88.1 MiB      8.0 MiB           1               covariance_matrix = np.cov(X.T)
    48     88.8 MiB      0.8 MiB           1               eigenvalues, eigenvectors = np.linalg.eig(covariance_matrix)
    49     88.9 MiB      0.0 MiB           1               idx = eigenvalues.argsort()[::-1]
    50     89.0 MiB      0.1 MiB           1               self.components = eigenvectors[:, idx]
    51     89.0 MiB      0.0 MiB           1               self.explained_variance_ = eigenvalues[idx]
    52                                                 elif self.decomposition_method == 'svd':
    53                                                     _, s, Vt = np.linalg.svd(X, full_matrices=False)
    54                                                     self.components = Vt.T
    55                                                     self.explained_variance_ = s**2 / (X.shape[0] - 1)
    56     89.0 MiB      0.0 MiB           1           self.explained_variance_ratio_ = self.explained_variance_ / self.explained_variance_.sum()
    57     89.0 MiB      0.0 MiB           1           self.cumulative_explained_variance_ratio_ = np.cumsum(self.explained_variance_ratio_)
    58     89.0 MiB      0.0 MiB           1           if self.n_components is not None:
    59                                                     self.components = self.components[:, :self.n_components]
    60                                                     self.explained_variance_ = self.explained_variance_[:self.n_components]
    61                                                     self.explained_variance_ratio_ = self.explained_variance_ratio_[:self.n_components]
    62                                                     self.cumulative_explained_variance_ratio_ = self.cumulative_explained_variance_ratio_[:self.n_components]


Filename: memory_usage/long_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    64     89.0 MiB     89.0 MiB           1       @profile
    65                                             def transform(self, X: Union[np.ndarray, list], n_components: Optional[int] = None):
    66                                                 """
    67                                                 Apply dimensionality reduction to X.
    68                                         
    69                                                 Parameters:
    70                                                 X (numpy.ndarray or list): The input data.
    71                                                 n_components (int): Number of components to keep. If not specified, all components are kept.
    72                                         
    73                                                 Returns:
    74                                                 X_new (numpy.ndarray): The input data transformed to the PCA space.
    75                                                 """
    76     89.0 MiB      0.0 MiB           1           X = np.asarray(X)
    77     96.6 MiB      7.7 MiB           1           X = X - np.mean(X, axis=0)
    78    112.0 MiB     15.3 MiB           1           X_new = np.dot(X, self.components[:, :n_components])
    79    112.0 MiB      0.0 MiB           1           return X_new


CPU Usage: 22.316666666666666%

----medium----

Filename: memory_usage/medium_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    28     73.5 MiB     73.5 MiB           1       @profile
    29                                             def __init__(self, n_components: Optional[int] = None, decomposition_method: Optional[str] = 'eigen'):
    30     73.5 MiB      0.0 MiB           1           self.n_components = n_components
    31     73.5 MiB      0.0 MiB           1           self.decomposition_method = decomposition_method
    32     73.5 MiB      0.0 MiB           1           self.components = None
    33     73.5 MiB      0.0 MiB           1           self.mean = None


Filename: memory_usage/medium_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    35     73.5 MiB     73.5 MiB           1       @profile
    36                                             def fit(self, X: np.ndarray) -> None:
    37                                                 """
    38                                                 Fit the model with X.
    39                                         
    40                                                 Parameters
    41                                                 ----------
    42                                                 X : numpy array of shape (n_samples, n_features)
    43                                                     Training data.
    44                                                 """
    45                                                 # Calculate the mean
    46     73.5 MiB      0.0 MiB           1           self.mean = np.mean(X, axis=0)
    47     81.2 MiB      7.6 MiB           1           X = X - self.mean
    48                                         
    49                                                 # Calculate the covariance matrix
    50     89.1 MiB      8.0 MiB           1           cov = np.cov(X.T)
    51                                         
    52                                                 # Eigen decomposition
    53     89.1 MiB      0.0 MiB           1           if self.decomposition_method == 'eigen':
    54     90.0 MiB      0.9 MiB           1               eigenvalues, eigenvectors = np.linalg.eig(cov)
    55                                                     # Sort eigenvectors
    56     90.0 MiB      0.0 MiB           1               eigenvectors = eigenvectors.T
    57     90.1 MiB      0.0 MiB           1               idxs = np.argsort(eigenvalues)[::-1]
    58     90.1 MiB      0.0 MiB           1               eigenvalues = eigenvalues[idxs]
    59     90.1 MiB      0.0 MiB           1               eigenvectors = eigenvectors[idxs]
    60                                                 # Singular Value Decomposition
    61                                                 elif self.decomposition_method == 'svd':
    62                                                     eigenvectors, s, v = np.linalg.svd(X.T)
    63                                                     eigenvalues = s**2 / (X.shape[0] - 1)
    64                                         
    65                                                 # Store first n eigenvectors
    66     90.1 MiB      0.0 MiB           1           self.components = eigenvectors[0:self.n_components]


Filename: memory_usage/medium_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    68     90.1 MiB     90.1 MiB           1       @profile
    69                                             def transform(self, X: np.ndarray) -> np.ndarray:
    70                                                 """
    71                                                 Apply the dimensionality reduction on X.
    72                                         
    73                                                 Parameters
    74                                                 ----------
    75                                                 X : numpy array of shape (n_samples, n_features)
    76                                                     Input data.
    77                                         
    78                                                 Returns
    79                                                 -------
    80                                                 X_new : numpy array of shape (n_samples, n_components)
    81                                                     Transformed values.
    82                                                 """
    83     97.7 MiB      7.6 MiB           1           X = X - self.mean
    84    105.4 MiB      7.7 MiB           1           return np.dot(X, self.components.T)


CPU Usage: 20.375%

----small----

Filename: memory_usage/small_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    16     73.7 MiB     73.7 MiB           1       @profile
    17                                             def __init__(self, n_components, method='eigen'):
    18     73.7 MiB      0.0 MiB           1           self.n_components = n_components
    19     73.7 MiB      0.0 MiB           1           self.method = method
    20     73.7 MiB      0.0 MiB           1           self.components = None
    21     73.7 MiB      0.0 MiB           1           self.mean = None


Filename: memory_usage/small_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    23     73.7 MiB     73.7 MiB           1       @profile
    24                                             def fit(self, X):
    25                                                 # Mean centering
    26     73.8 MiB      0.0 MiB           1           self.mean = np.mean(X, axis=0)
    27     81.4 MiB      7.6 MiB           1           X = X - self.mean
    28                                                 # covariance, function needs samples as columns
    29     89.3 MiB      7.9 MiB           1           cov = np.cov(X.T)
    30                                         
    31                                                 # eigen decomposition
    32     89.3 MiB      0.0 MiB           1           if self.method == 'eigen':
    33     90.3 MiB      1.0 MiB           1               eigenvalues, eigenvectors = np.linalg.eig(cov)
    34                                                     # -> eigenvector v = [:,i] column vector, transpose for easier calculations
    35                                                     # sort eigenvectors
    36     90.3 MiB      0.0 MiB           1               eigenvectors = eigenvectors.T
    37     90.3 MiB      0.0 MiB           1               idxs = np.argsort(eigenvalues)[::-1]
    38     90.3 MiB      0.0 MiB           1               eigenvalues = eigenvalues[idxs]
    39     90.3 MiB      0.0 MiB           1               eigenvectors = eigenvectors[idxs]
    40                                                     # store first n eigenvectors
    41     90.3 MiB      0.0 MiB           1               self.components = eigenvectors[0:self.n_components]
    42                                         
    43                                                 # singular value decomposition
    44                                                 elif self.method == 'svd':
    45                                                     u, s, v = np.linalg.svd(X.T)
    46                                                     self.components = v[0:self.n_components]


Filename: memory_usage/small_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    48     90.3 MiB     90.3 MiB           1       @profile
    49                                             def transform(self, X):
    50                                                 # project data
    51     98.0 MiB      7.6 MiB           1           X = X - self.mean
    52    106.4 MiB      8.5 MiB           1           return np.dot(X, self.components.T)


CPU Usage: 21.575%
