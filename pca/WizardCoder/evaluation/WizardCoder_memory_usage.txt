
----long----

Filename: memory_usage/long_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    19    122.0 MiB    122.0 MiB           1       @profile
    20                                             def __init__(self, n_components: int=None, decomposition_method: str='eigen') -> None:
    21    122.0 MiB      0.0 MiB           1           self.n_components = n_components
    22    122.0 MiB      0.0 MiB           1           self.decomposition_method = decomposition_method


Filename: memory_usage/long_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    23    122.0 MiB    122.0 MiB           1       @profile
    24                                             def fit(self, X: Union[np.ndarray, List[List[float]], DataFrame]) -> 'PrincipalComponentAnalysis':
    25                                                 """Compute the eigen values and vectors for the inputted data."""
    26                                         
    27                                                 # Convert to numpy array if not already
    28    122.0 MiB      0.0 MiB           1           if isinstance(X, (DataFrame, list)):
    29                                                     X = np.array(X)
    30                                         
    31                                                 # Subtract mean from data
    32    122.1 MiB      0.0 MiB           1           self.mean_ = np.mean(X, axis=0)
    33    122.1 MiB      0.0 MiB           1           X -= self.mean_
    34                                         
    35                                                 # Compute covariance matrix
    36    130.0 MiB      8.0 MiB           1           C = np.cov(X.T)
    37                                         
    38    130.0 MiB      0.0 MiB           1           if self.decomposition_method == 'eigen':
    39                                                     # Calculate Eigenvalues and Eigenvectors
    40    130.6 MiB      0.5 MiB           1               eigenvalues, eigenvectors = np.linalg.eig(C)
    41                                         
    42                                                     # Sort eigenvalues and eigenvectors in descending order
    43    130.6 MiB      0.0 MiB           1               indices = np.argsort(eigenvalues)[::-1]
    44                                                 elif self.decomposition_method == 'svd':
    45                                                     U, S, VT = np.linalg.svd(X, full_matrices=False)
    46                                                     eigenvectors, eigenvalues = VT.T, (S**2) / (X.shape[0] - 1)
    47                                                 else:
    48                                                     raise ValueError("decomposition method must be either 'eigen' or 'svd'")
    49                                         
    50                                                 # Compute explained variance and cumulative sum of explained variance
    51    130.6 MiB      0.0 MiB           1           total_var = np.sum(eigenvalues)
    52    130.6 MiB      0.0 MiB           1           self.explained_variance_ratio_ = eigenvalues / total_var
    53    130.6 MiB      0.0 MiB           1           self.cumulative_explained_variance_ratio_ = np.cumsum(self.explained_variance_ratio_)
    54                                         
    55                                                 # Get the top n components if specified
    56    130.6 MiB      0.0 MiB           1           if self.n_components is not None:
    57                                                     eigenvectors = eigenvectors[indices[:self.n_components]]
    58                                         
    59    130.6 MiB      0.0 MiB           1           self.eigenvalues_ = eigenvalues
    60    130.6 MiB      0.0 MiB           1           self.components_ = eigenvectors
    61                                         
    62    130.6 MiB      0.0 MiB           1           return self


Filename: memory_usage/long_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    64    130.6 MiB    130.6 MiB           1       @profile
    65                                             def transform(self, X: Union[np.ndarray, List[List[float]], DataFrame], n_components:
    66                                         int=None) -> np.ndarray:
    67                                                 """Project the inputted data onto the components."""
    68    130.6 MiB      0.0 MiB           1           if isinstance(X, (DataFrame, list)):
    69                                                     X = np.array(X)
    70                                         
    71                                                 # Subtract mean from data
    72    130.7 MiB      0.1 MiB           1           X -= self.mean_
    73                                         
    74                                                 # Project data onto components
    75    130.7 MiB      0.0 MiB           1           if n_components is None:
    76    138.4 MiB      7.7 MiB           1               return X @ self.components_.T
    77                                                 else:
    78                                                     return X @ self.components_[:n_components].T


CPU Usage: 14.35%

----medium----

Filename: memory_usage/medium_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    26     73.1 MiB     73.1 MiB           1       @profile
    27                                             def __init__(self, n_components: Optional[int] = None,
    28                                                          decomposition_method: str = "eigen"):
    29     73.1 MiB      0.0 MiB           1           self.n_components = n_components
    30     73.1 MiB      0.0 MiB           1           self.decomposition_method = decomposition_method


Filename: memory_usage/medium_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    32     73.2 MiB     73.2 MiB           1       @profile
    33                                             def fit(self, X: np.ndarray) -> None:
    34                                                 """Fit PCA model to data.
    35                                         
    36                                                 Args:
    37                                                     X (np.ndarray): Input data of shape (n_samples, n_features).
    38                                         
    39                                                 Returns:
    40                                                     None. Updates the mean, covariance matrix and eigenvalues/vectors.
    41                                         
    42                                                 """
    43                                                 # Mean centering
    44     73.2 MiB      0.0 MiB           1           self.mean = np.mean(X, axis=0)
    45     80.9 MiB      7.6 MiB           1           X_centered = X - self.mean
    46     80.9 MiB      0.0 MiB           1           n_samples = X.shape[0]
    47                                         
    48     80.9 MiB      0.0 MiB           1           if self.decomposition_method == 'eigen':
    49                                                     # Computing covariance matrix
    50     88.8 MiB      8.0 MiB           1               cov_mat = np.cov(X_centered, rowvar=False)
    51                                         
    52                                                     # Eigen decomposition
    53     89.6 MiB      0.8 MiB           1               eigen_values, eigen_vectors = np.linalg.eigh(cov_mat)
    54                                         
    55                                                     # Sort eigenvalues and vectors in descending order
    56     89.6 MiB      0.0 MiB           1               sorted_index = np.argsort(eigen_values)[::-1]
    57     89.6 MiB      0.0 MiB           1               self.sorted_eigenvalues = eigen_values[sorted_index]
    58     89.6 MiB      0.0 MiB           1               self.sorted_eigenvectors = eigen_vectors[:, sorted_index]
    59                                                 elif self.decomposition_method == 'svd':
    60                                                     # Singular Value Decomposition
    61                                                     U, Sigma, VT = np.linalg.svd(X_centered)
    62                                         
    63                                                     # Retain only the first k eigenvectors (sorted in decreasing order of their corresponding eigenvalues)
    64                                                     self.sorted_eigenvalues = Sigma**2 / n_samples
    65                                                     self.sorted_eigenvectors = U
    66                                                 else:
    67                                                     raise ValueError("Invalid decomposition method. Choose 'eigen' or 'svd'.")


Filename: memory_usage/medium_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    69     89.6 MiB     89.6 MiB           1       @profile
    70                                             def transform(self, X: np.ndarray) -> np.ndarray:
    71                                                 """Apply dimensionality reduction on input data.
    72                                         
    73                                                 Args:
    74                                                     X (np.ndarray): Input data of shape (n_samples, n_features).
    75                                         
    76                                                 Returns:
    77                                                     Transformed data with reduced dimensionality.
    78                                         
    79                                                 """
    80     89.6 MiB      0.0 MiB           1           X -= self.mean
    81                                         
    82     89.6 MiB      0.0 MiB           1           if self.n_components is None:
    83                                                     return np.dot(X, self.sorted_eigenvectors)
    84                                                 else:
    85     97.7 MiB      8.1 MiB           1               return np.dot(X, self.sorted_eigenvectors[:, :self.n_components])


Filename: memory_usage/medium_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    87     73.1 MiB     73.1 MiB           1       @profile
    88                                             def fit_transform(self, X: np.ndarray) -> np.ndarray:
    89                                                 """Fit PCA model to data and then apply dimensionality reduction on it.
    90                                         
    91                                                 Args:
    92                                                     X (np.ndarray): Input data of shape (n_samples, n_features).
    93                                         
    94                                                 Returns:
    95                                                     Transformed data with reduced dimensionality.
    96                                         
    97                                                 """
    98     89.6 MiB     16.5 MiB           1           self.fit(X)
    99     97.7 MiB      8.1 MiB           1           return self.transform(X)


CPU Usage: 21.775000000000002%

----small----

Filename: memory_usage/small_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17     83.2 MiB     83.2 MiB           1       @profile
    18                                             def __init__(self, n_components=None):
    19     83.2 MiB      0.0 MiB           1           self.n_components = n_components


Filename: memory_usage/small_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    20     83.2 MiB     83.2 MiB           1       @profile
    21                                             def fit(self, X, method='eigen'):
    22                                                 # center the data
    23     83.3 MiB      0.0 MiB           1           self.mean_ = np.mean(X, axis=0)
    24     83.3 MiB      0.0 MiB           1           X -= self.mean_
    25                                         
    26     83.3 MiB      0.0 MiB           1           if method == 'eigen':
    27                                                     # compute covariance matrix
    28     91.2 MiB      8.0 MiB           1               cov_matrix = np.cov(X.T)
    29                                         
    30                                                     # get eigenvalues and eigenvectors of the covariance matrix
    31     91.8 MiB      0.5 MiB           1               eig_vals, eig_vecs = np.linalg.eigh(cov_matrix)
    32                                         
    33                                                     # sort eigenvalues and corresponding eigenvectors in descending order
    34     91.8 MiB      0.0 MiB           1               idx = eig_vals.argsort()[::-1]
    35     91.8 MiB      0.0 MiB           1               self.eigenvalues_ = eig_vals[idx][:self.n_components]
    36     91.9 MiB      0.1 MiB           1               self.components_ = eig_vecs[:, idx][:, :self.n_components]
    37                                         
    38                                                 elif method == 'svd':
    39                                                     # perform SVD on the centered data matrix
    40                                                     U, sigma, VT = svd(X)
    41                                                     self.eigenvalues_ = (sigma ** 2)[:self.n_components]
    42                                                     self.components_ = VT[:self.n_components].T


Filename: memory_usage/small_memory_usage_version.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    43     91.9 MiB     91.9 MiB           1       @profile
    44                                             def transform(self, X):
    45                                                 # project data to lower dimensions
    46    108.0 MiB     16.1 MiB           1           return np.dot(X - self.mean_, self.components_)


CPU Usage: 21.650000000000002%
